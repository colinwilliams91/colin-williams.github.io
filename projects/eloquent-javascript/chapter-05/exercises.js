// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

// SOLVED with SPREAD OPERATOR
// function flatten(arrays) {
//   let output = [];
//   return output.concat(...arrays);
// }

// SOLVED with .REDUCE
function flatten(arrays) {
  let output = arrays.reduce(function(flat, current){
    return flat.concat(current);
  }, []); 
  return output;
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(start, test, update, body) {
  for (let value = start; test(value); value = update(value)){
    body(value);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every() {

}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

// **will likely demonstrate in class**
function dominantDirection(string) {
  
  let ltr = [];
  let rtl = [];

  for (let i = 0; i < string.length; i++){
    let scriptName = characterScript(string.charCodeAt(i)); // null or { ... }

    if (scriptName !== null){
      if (scriptName.direction === "ltr"){
        ltr.push(scriptName);
      } else {
        rtl.push(scriptName);
      }
    }
  }
  if (ltr.length > rtl.length){
    return "ltr";
  } else {
    return "rtl";
  }
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
